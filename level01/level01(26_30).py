# -*- coding: utf-8 -*-
"""level01(26_30).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C02EpyUxb3UCJ4aoIC8m2CLR92wfsRzq

# 26.두 정수 사이의 합
"""

# 두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution
# a와 b가 같은 경우는 둘 중 아무 수나 리턴
# a와 b의 대소관계는 정해져있지 않음

def solution(a, b):
  if a > b:
    a, b = b, a

  return sum(range(a, b+1))

############################################################

############################################################
# 메모

# a = 3
# b = 3

# if a > b:
#   a, b = b, a

# # elif a == b:
# #   print(a)

# # else:
# #   sum(range(a, b+1))

# print(sum(range(a, b+1)))
# # sum(range(a, b+1))

# # sum(range(b+1, a))
############################################################

"""# 27.나누어 떨어지는 숫자 배열"""

# array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution
# divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환

# def solution(arr, divisor):
#   lst = [i for i in arr if i % divisor == 0]

#   if len(lst) == 0:
#     lst.append(-1)

#   return sorted(lst)


def solution(arr, divisor):
  return sorted([i for i in arr if i % divisor == 0]) or [-1]

############################################################

############################################################
# 메모

# arr = [5, 9, 7, 10]
# arr = [2, 36, 1, 3]
# divisor	= 1

# lst = []

# for i in arr:
#   if i % divisor == 0:
#     lst.append(i)

# if len(lst) == 0:
#   lst.append(-1)

# sorted(lst)
############################################################

"""# 28.같은 숫자는 싫어"""

# 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거
# 반환할 때는 배열 arr의 원소들의 순서를 유지
# 배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수

def solution(arr):
  lst = []

  for i in arr:
    if [i] != lst[-1:]:
      lst.append(i)
  return lst


############################################################

############################################################
# 메모

# arr = [1,1,3,3,0,1,1]
# # arr = [4,4,4,3,3]

# lst = []

# for i in arr:
#   if [i] != lst[-1:]:
#     lst.append(i)

#   #   pass
  
#   # else:
#   #   lst.append(i)

# lst

############################################################

"""# 29.[1차] 다트 게임"""

# 다트판에 다트를 세 차례 던져 그 점수의 합계로 실력을 겨루는 게임
# 3번의 기회, 0-10점
# S = 1제곱, D = 2제곱, T = 3제곱 : 점수마다 하나씩 존재
# * : 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배, 
#     첫 번째 기회에도 나올 수 있음 (단, 첫 번째 *의 점수만 2배)
#     중첩 가능 (4배가 됨)
# # : 해당 점수는 마이너스 배
#     중첩 가능 (-2배가 됨)

# 0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수
############################################################

def solution(dartResult):
  ans = ''
  lst = []

  for i in dartResult:
    if i.isdigit():
      ans += i
    
    elif i == 'S':
      ans = int(ans) ** 1
      lst.append(ans)
      ans = ''

    elif i == 'D':
      ans = int(ans) ** 2
      lst.append(ans)
      ans = ''

    elif i == 'T':
      ans = int(ans) ** 3
      lst.append(ans)
      ans = ''

    elif i == '*':
      if len(lst) > 1:
        lst[-2] = lst[-2] * 2
        lst[-1] = lst[-1] * 2
      else:
        lst[-1] = lst[-1] * 2
      
    elif i == '#':
      lst[-1] = lst[-1] * (-1)

  return sum(lst)
############################################################

############################################################
# 메모
# 한 단위씩 나눠서 계산하려고 했으나 for문을 2번 이상 돌아야 함 (pass)

# dartResult = '10S2D*3T'
# dartResult = '1D2S#10S'

# ans = ''

# dartResult = list(dartResult)

# for i in dartResult:
#   if i.isdigit():
#     ans = ans + i
#   else:
#     ans = ans + i + ' '
  
# ans = ans.split()
# ans
############################################################

############################################################
# 메모
# 전체를 순회하기로 함
# ans = ''
# lst = []

# dartResult = '1D2S#10S'
# dartResult = '1T2D3D#'

# for i in dartResult:
#   if i.isdigit():
#     ans += i
  
#   elif i == 'S':
#     ans = int(ans) ** 1
#     lst.append(ans)
#     ans = ''

#   elif i == 'D':
#     ans = int(ans) ** 2
#     lst.append(ans)
#     ans = ''

#   elif i == 'T':
#     ans = int(ans) ** 3
#     lst.append(ans)
#     ans = ''

#   elif i == '*':
#     if len(lst) > 1:
#       lst[-2] = lst[-2] * 2
#       lst[-1] = lst[-1] * 2
#     else:
#       lst[-1] = lst[-1] * 2
    
#   elif i == '#':
#     lst[-1] = lst[-1] * (-1)

# sum(lst)

###########################################################

"""# 30.가운데 글자 가져오기"""

# 단어 s의 가운데 글자를 반환하는 함수, solution
# 단어의 길이가 짝수라면 가운데 두글자를 반환
###########################################################

def solution(s):
  if len(s) % 2:
    ans = s[len(s)//2]

  else:
    ans = s[len(s)//2-1] + s[len(s)//2]

  return ans

###########################################################

###########################################################
# 메모

# s = "abcde"	

# if len(s) % 2:
#   ans = s[len(s)//2]

# else:
#   ans = s[len(s)//2-1] + s[len(s)//2]

# ans
###########################################################

