# -*- coding: utf-8 -*-
"""level1(16_).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XF9WjgkVT1QjFAwaQymrl2ByC2TzreRY

# 16.약수의 합
"""

# 정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution

def solution(n):
  return sum([i for i in range(1, n+1) if n % i == 0])

##################################################

# def solution(n):
#     m = 0
#     for i in range(1, n+1):
#         if n % i == 0:
#             m += i
#     return m

##################################################
# 메모
# n = 12

# m = 0

# for i in range(1, n+1):
#   if n % i == 0:
#     m += i

# sum([i for i in range(1, n+1) if n % i == 0])

##################################################

"""# 17.시저 암호"""

# 시저 암호 : 어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식
# "AB"는 1만큼 밀면 "BC", 3만큼 밀면 "DE"
# "z"는 1만큼 밀면 "a"
# 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution
# 공백은 밀어도 공백
# 소문자, 대문자, 공백으로만 이루어져 있음
# s의 길이는 8000이하, n은 1이상 15이하인 자연수
##################################################

# 풀이 1

def solution(s, n):
  lst = []

  ua = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  la = ua.lower()

  for i in s:
    if i in ua:
      id = ua.find(i) + n
      lst.append(ua[id % 26])

    elif i in la:
      id = la.find(i) + n
      lst.append(la[id % 26])
  
    else:
      lst.append(i)


  return ''.join(lst)
##################################################

solution('a B z', 4)

##################################################
# 풀이 2

def solution(s, n):
  lst = []

  ua = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  la = ua.lower()

  for i in s:
    if i in ua:
      id = ua.find(i) + n
      ans += ua[id % 26]

    elif i in la:
      id = la.find(i) + n
      ans += la[id % n]
    
    else:
      ans += ' '

  return ans
##################################################

solution('a B z', 4)

##################################################
# 메모장
# s = 'AB'
# n = 4

# s = "a B z"

# ans = ''

# lst = []

# ua = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
# la = ua.lower()
# # la = 'abcdefghijklmnopqrstuvwxyz'

# for i in s:
#   if i in ua:
#     id = ua.find(i) + n
#     # ans += ua[id % 26]
#     lst.append(ua[id % 26])

#   elif i in la:
#     id = la.find(i) + n
#     # ans += la[id % n]
#     lst.append(la[id % 26])

  
#   else:
#     # ans += ' '
#     lst.append(i)

# # ans
# ''.join(lst)
##################################################

"""# 18.문자열을 정수로 바꾸기"""

# 문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution
# s의 길이는 1 이상 5이하, s의 맨앞에는 부호(+, -)가 올 수 있음
# s는 부호와 숫자로만 이루어져있음, s는 "0"으로 시작하지 않음
##################################################

def solution(s):
  return int(s)

solution('-1233')
##################################################

"""# 19.수박수박수박수박수박수?"""

# 길이가 n
# "수박수박수박수...."와 같은 패턴을 유지하는 문자열을 리턴하는 함수, solution
##################################################

def solution(n):
  s = '수박'
  ans = ''

  for i in range(n):
    if i % 2 == 0:
      ans += s[0]
    
    else:
      ans += s[1]

  return ans

solution(4)
##################################################

##################################################
# 메모

# n = 3
# s = '수박'
# ans = ''

# for i in range(n):
#   if i % 2 == 0:
#     ans += s[0]
  
#   else:
#     ans += s[1]

# ans
##################################################

##################################################
# 다른 사람 풀이

def water_melon(n):
    s = "수박" * n
    return s[:n]
##################################################

"""# 20.소수 찾기"""

# 1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution
# 소수는 1과 자기 자신으로만 나누어지는 수 (1 제외)
# n은 2이상 1000000이하의 자연수
##################################################

def solution(n):
  num = set(range(2, n+1))

  for i in range(2, n+1):
    if i in num:
      num -= set(range(2*i, n+1, i))

  return len(num)
##################################################

