# -*- coding: utf-8 -*-
"""level01(31_).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qLEXQ-PUsMKaUwk4QRXDLVYMebBSl2PQ

# 31.1차 비밀지도
"""

# 지도는 한 변의 길이가 n인 정사각형 배열 형태
# 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류
# 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있음
# 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽
# 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백
# "지도 1"과 "지도 2"는 각각 정수 배열로 암호화

# 입력 : 한 변 크기 n 과 2개의 정수 배열 arr1, arr2
# 출력 : 원래의 비밀지도를 해독하여 '#', 공백으로 구성된 문자열 배열

#########################################################################

def solution(n, arr1, arr2):
  lst = []

  for i, j in zip(arr1, arr2):
      t = str(bin(i | j)[2:])
      t = t.rjust(n, '0')
      t = t.replace('1', '#')
      t = t.replace('0', ' ')
      lst.append(t)

  return lst

#########################################################################

#########################################################################
# 메모

# arr1 = [9, 20, 28, 18, 11]
# arr2 = [30, 1, 21, 17, 28]
# n = 5
# lst = []



# for i, j in zip(arr1, arr2):
#     t = str(bin(i | j)[2:])
#     t = t.rjust(n, '0')
#     t = t.replace('1', '#')
#     t = t.replace('0', ' ')
#     lst.append(t)

# lst

#########################################################################

"""# 32.부족한 금액 계산하기"""

# 놀이기구의 원래 이용료는 price원 인데, 놀이기구를 N 번 째 이용한다면 원래 이용료의 N배를 받기로
# 놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 return 하도록 solution 함수
#금액이 부족하지 않으면 0을 return
#########################################################################
def solution(price, money, count):
  lst = []

  for i in range(1, count + 1):
    pr = price * i 
    lst.append(pr)

  if sum(lst) > money:
    return abs(money - sum(lst))

  else:
    return 0
#########################################################################

#########################################################################
# 메모

# price = 3
# count = 4
# money = 20
# lst = []


# for i in range(1, count + 1):
#   pr = price * i 
#   lst.append(pr)

# if sum(lst) > money:
#   print(abs(money - sum(lst)))

# else:
#   print(0)
#########################################################################

"""# 33.나머지가 1이 되는 수 찾기"""

# n을 x로 나눈 나머지가 1이 되도록 하는 가장 작은 자연수 x를 return 하도록 solution 함수
#########################################################################
def solution(n):
  return min([i for i in range(1, n) if n % i == 1])

#########################################################################

#########################################################################
# 메모

# n = 10
# # lst = []

# # for i in range(1, n):
# #   if n % i == 1:
# #     lst.append(i)

# # print(min(lst))

# min([i for i in range(1, n) if n % i == 1])

#########################################################################

"""# 34.최소직사각형"""

# 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수
#########################################################################

def solution(size):
  return max(max(i) for i in size) * max(min(i) for i in size)

#########################################################################

#########################################################################
# 메모

# size = [[60, 50], [30, 70], [60, 30], [80, 40]]
# lst1 = []
# lst2 = []
# for i in size:
#   lst1.append(max(i))
#   lst2.append(min(i))

# print(lst1)
# print(lst2)

# print(max(lst1) * max(lst2))
#########################################################################

"""# 35.2016년"""

# 2016년 1월 1일은 금요일
# 2016년 a월 b일은 무슨 요일일까요?
# 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution
#########################################################################

def solution(a, b):
  day = ['THU', 'FRI', 'SAT', 'SUN', 'MON', 'TUE', 'WED']
  month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

  return day[(sum(month[:a-1]) + b) % 7]

#########################################################################

#########################################################################
# 메모 

# a = 5
# b = 24
# day = ['THU', 'FRI', 'SAT', 'SUN', 'MON', 'TUE', 'WED']
# month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

# day[(sum(month[:a-1]) + b) % 7]

#########################################################################