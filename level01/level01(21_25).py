# -*- coding: utf-8 -*-
"""level01(21_25).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UcE1sHTP9YU35qNS37NaHLVNHjMlzbvC

# 21.서울에서 김서방 찾기
"""

# String형 배열 seoul의 element중 "Kim"의 위치 x를 찾아
# "김서방은 x에 있다"는 String을 반환하는 함수, solution

def solution(seoul):
  return '김서방은 {}에 있다'.format(seoul.index('Kim'))
############################################################

############################################################
# 메모
# seoul = ["Jane", "Kim"]

# print('김서방은 {}에 있다'.format(seoul.index('Kim')))
############################################################

"""# 22.문자열 다루기 기본"""

# 문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution

def solution(s):	
  if len(s) == 4 or len(s) == 6:
    for i in s:
      if not i.isdigit():   # 숫자인지 판별
        return False
    return True

  else:
      return False

############################################################

############################################################
# 메모

# # s = "a234"
# s = '13435a'
# s = '123234'

# if len(s) == 4 or len(s) == 6:
#   for i in s:
#     if not i.isdigit():
#       print('False')
#   print('True')

# else:
#   print('False')


############################################################

"""# 23.문자열 내림차순으로 배치하기"""

# 문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution
# 대문자는 소문자보다 작은 것으로 간주

def solution(s):
  s = sorted(s, reverse=True)
  return ''.join(s)


############################################################

############################################################
# 메모

# s = "Zbcdefg"
# s = "ZzbAdefg"

# s = sorted(s, reverse=True)

# ''.join(s)

############################################################

"""# 24.문자열 내 p와 y의 개수"""

# 대문자와 소문자가 섞여있는 문자열 s
# s에 'p'의 개수와 'y'의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution
# 'p', 'y' 모두 하나도 없는 경우는 항상 True를 리턴
# 대문자와 소문자는 구별하지 않음

def solution(s):
  p_ans, y_ans = 0, 0

  for i in s:
    if i == 'p' or i == 'P':
      p_ans += 1

    elif i == 'y' or i == 'Y':
      y_ans += 1

  if p_ans == y_ans:
    return True

  else:
    return False

############################################################

############################################################
# 메모

s = "pPoooyY"

p_ans, y_ans = 0, 0

for i in s:
  if i == 'p' or i == 'P':
    p_ans += 1

  elif i == 'y' or i == 'Y':
    y_ans += 1

if p_ans == y_ans:
  print(True)

else:
  print(False)

############################################################

"""- 다른 풀이"""

def solution(s):
  return s.lower().count('p') == s.lower().count('y')
############################################################

"""# 25.문자열 내 마음대로 정렬하기"""

# 문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬
# 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치

def solution(strings, n):
  return sorted(sorted(strings), key = lambda s: s[n])

############################################################

############################################################
# 메모

# strings = ["sun", "bed", "car"]
# strings = ["abce", "abcd", "cdx"]
# n = 2

# sorted(sorted(strings), key = lambda s: s[n])

############################################################

